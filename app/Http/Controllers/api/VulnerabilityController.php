<?php

namespace App\Http\Controllers\Api;

use App\Http\Controllers\Controller;
use App\Http\Requests\VulnerabilityRequest;
use App\Models\Vulnerability;
use App\Traits\ApiResponse;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\ModelNotFoundException;
use Illuminate\Http\JsonResponse;
use Illuminate\Http\Request;

class VulnerabilityController extends Controller
{
    use ApiResponse;

    /**
     * Display a listing of vulnerabilities.
     */
    public function index(Request $request): JsonResponse
    {
        $query = Vulnerability::query();

        // Filter by code
        if ($request->has('code')) {
            $query->where('code', $request->code);
        }

        // Search in title or description
        if ($request->has('search')) {
            $searchTerm = $request->search;
            $query->where(function (Builder $query) use ($searchTerm) {
                $query->where('title', 'like', "%{$searchTerm}%")
                    ->orWhere('description', 'like', "%{$searchTerm}%");
            });
        }

        // Sorting
        if ($request->has('sort')) {
            $sortField = ltrim($request->sort, '-');
            $sortDirection = str_starts_with($request->sort, '-') ? 'desc' : 'asc';
            $query->orderBy($sortField, $sortDirection);
        }

        // Pagination
        $perPage = $request->input('per_page', 5);
        $vulnerabilities = $query->paginate($perPage);

        return response()->json($vulnerabilities);
    }

    /**
     * Store a newly created vulnerability.
     */
    public function store(VulnerabilityRequest $request): JsonResponse
    {
        $vulnerability = Vulnerability::create($request->validated());
        return $this->respondWithData($vulnerability, 'Vulnerability created successfully', 201);
    }

    /**
     * Display the specified vulnerability.
     */
    public function show(int $id): JsonResponse
    {
        try {
            $vulnerability = Vulnerability::findOrFail($id);
            return $this->respondWithData($vulnerability);
        } catch (ModelNotFoundException) {
            return $this->respondNotFound();
        }
    }

    /**
     * Update the specified vulnerability.
     */
    public function update(VulnerabilityRequest $request, int $id): JsonResponse
    {
        try {
            $vulnerability = Vulnerability::findOrFail($id);
            $vulnerability->update($request->validated());
            return $this->respondWithData($vulnerability, 'Vulnerability updated successfully');
        } catch (ModelNotFoundException) {
            return $this->respondNotFound();
        }
    }

    /**
     * Remove the specified vulnerability.
     */
    public function destroy(int $id): JsonResponse
    {
        try {
            $vulnerability = Vulnerability::findOrFail($id);
            $vulnerability->delete();
            return $this->respondWithMessage('Vulnerability deleted successfully');
        } catch (ModelNotFoundException) {
            return $this->respondNotFound();
        }
    }
}
