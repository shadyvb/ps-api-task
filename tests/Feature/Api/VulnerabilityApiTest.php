<?php

namespace Tests\Feature\Api;

use App\Models\Vulnerability;
use Illuminate\Foundation\Testing\RefreshDatabase;
use Tests\TestCase;

class VulnerabilityApiTest extends TestCase
{
    use RefreshDatabase;

    private array $validVulnerabilityData;

    protected function setUp(): void
    {
        parent::setUp();

        $this->validVulnerabilityData = [
            'code' => 'TEST-001',
            'title' => 'Test Vulnerability',
            'description' => 'This is a test vulnerability description',
            'references' => [
                [
                    'title' => 'Test Reference',
                    'link' => 'https://example.com/test'
                ]
            ],
            'cwes' => [
                [
                    'code' => 'CWE-123',
                    'name' => 'Test CWE',
                    'link' => 'https://cwe.mitre.org/data/definitions/123.html'
                ]
            ]
        ];
    }

    public function test_can_list_all_vulnerabilities()
    {
        // Arrange
        Vulnerability::factory()->count(3)->create();

        // Act
        $response = $this->getJson('/api/vulnerabilities');

        // Assert
        $response->assertOk()
            ->assertJsonStructure([
                'data' => [
                    '*' => [
                        'id',
                        'code',
                        'title',
                        'description',
                        'references',
                        'cwes',
                        'created_at',
                        'updated_at'
                    ]
                ]
            ]);
    }

    public function test_can_create_a_vulnerability()
    {
        // Act
        $response = $this->postJson('/api/vulnerabilities', $this->validVulnerabilityData);

        // Assert
        $response->assertCreated()
            ->assertJsonStructure([
                'data' => [
                    'id',
                    'code',
                    'title',
                    'description',
                    'references',
                    'cwes',
                    'created_at',
                    'updated_at'
                ]
            ]);

        $this->assertDatabaseHas('vulnerabilities', [
            'code' => $this->validVulnerabilityData['code'],
            'title' => $this->validVulnerabilityData['title'],
            'description' => $this->validVulnerabilityData['description'],
        ]);
    }

    public function test_can_show_a_vulnerability()
    {
        // Arrange
        $vulnerability = Vulnerability::factory()->create();

        // Act
        $response = $this->getJson("/api/vulnerabilities/{$vulnerability->id}");

        // Assert
        $response->assertOk()
            ->assertJsonStructure([
                'data' => [
                    'id',
                    'code',
                    'title',
                    'description',
                    'references',
                    'cwes',
                    'created_at',
                    'updated_at'
                ]
            ]);

        $this->assertDatabaseHas('vulnerabilities', [
            'id' => $vulnerability->id,
            'code' => $vulnerability->code,
            'title' => $vulnerability->title,
            'description' => $vulnerability->description,
        ]);
    }

    public function test_can_update_a_vulnerability()
    {
        // Arrange
        $vulnerability = Vulnerability::factory()->create();
        $updateData = $this->validVulnerabilityData;
        $updateData['title'] = 'Updated Title';

        // Act
        $response = $this->putJson("/api/vulnerabilities/{$vulnerability->id}", $updateData);

        // Assert
        $response->assertOk()
            ->assertJsonStructure([
                'data' => [
                    'id',
                    'code',
                    'title',
                    'description',
                    'references',
                    'cwes',
                    'created_at',
                    'updated_at'
                ]
            ]);

        $this->assertDatabaseHas('vulnerabilities', [
            'id' => $vulnerability->id,
            'title' => 'Updated Title'
        ]);
    }

    public function test_can_delete_a_vulnerability()
    {
        // Arrange
        $vulnerability = Vulnerability::factory()->create();

        // Act
        $response = $this->deleteJson("/api/vulnerabilities/{$vulnerability->id}");

        // Assert
        $response->assertOk()
            ->assertJsonStructure([
                'message'
            ]);

        $this->assertDatabaseMissing('vulnerabilities', [
            'id' => $vulnerability->id
        ]);
    }

    public function test_validates_required_fields_when_creating_vulnerability()
    {
        // Act
        $response = $this->postJson('/api/vulnerabilities', []);

        // Assert
        $response->assertUnprocessable()
            ->assertJsonValidationErrors(['code', 'title', 'description']);
    }

    public function test_validates_unique_code_when_creating_vulnerability()
    {
        // Arrange
        Vulnerability::factory()->create(['code' => $this->validVulnerabilityData['code']]);

        // Act
        $response = $this->postJson('/api/vulnerabilities', $this->validVulnerabilityData);

        // Assert
        $response->assertUnprocessable()
            ->assertJsonValidationErrors(['code']);
    }

    public function test_validates_references_structure()
    {
        // Arrange
        $data = $this->validVulnerabilityData;
        $data['references'] = [
            ['title' => 'Invalid Reference'] // Missing link
        ];

        // Act
        $response = $this->postJson('/api/vulnerabilities', $data);

        // Assert
        $response->assertUnprocessable()
            ->assertJsonValidationErrors(['references.0.link']);
    }

    public function test_validates_cwes_structure()
    {
        // Arrange
        $data = $this->validVulnerabilityData;
        $data['cwes'] = [
            ['code' => 'CWE-123'] // Missing name and link
        ];

        // Act
        $response = $this->postJson('/api/vulnerabilities', $data);

        // Assert
        $response->assertUnprocessable()
            ->assertJsonValidationErrors(['cwes.0.name', 'cwes.0.link']);
    }

    public function test_returns_404_for_non_existent_vulnerability()
    {
        // Act
        $response = $this->getJson('/api/vulnerabilities/999');

        // Assert
        $response->assertNotFound();
    }
}
